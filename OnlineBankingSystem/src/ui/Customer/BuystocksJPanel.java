/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Customer;

import Config.DatabaseConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Customer.CustomerForm;
import static ui.Customer.AddamountJPanel.con;
import utilities.Validations;

/**
 *
 * @author gorubhambhani
 */
public class BuystocksJPanel extends javax.swing.JPanel {

    /**
     * Creates new form BuystocksJPanel
     */
    Validations v;
    CustomerForm form;
    int custId = 0, brokerid=0, co=0;
    int quantity = 0, com = 0;

    public BuystocksJPanel(CustomerForm cf) {
        this.form = cf;
        String loginArr[] = form.getLoginId().split("CT");
        custId = Integer.parseInt(loginArr[1]);
        initComponents();
        v = new Validations();
        populateBrokers();
        populateSymbols();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        qty = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        stockTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnAddStock = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        brokers = new javax.swing.JComboBox<>();
        comm = new javax.swing.JTextField();
        price = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        symbols = new javax.swing.JComboBox<>();

        stockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Customer Id", "Broker Id", "Symbol", "Trade", "Stock price", "Quantity", "Total amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        stockTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stockTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(stockTable);

        jLabel2.setText("Stock Symbol");

        jLabel3.setText("Stock Quantity");

        btnAddStock.setText("Add");
        btnAddStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddStockActionPerformed(evt);
            }
        });

        jLabel5.setText("Commission Amount");

        jLabel6.setText("Broker");

        brokers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                brokersMouseClicked(evt);
            }
        });
        brokers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brokersActionPerformed(evt);
            }
        });

        comm.setEditable(false);

        price.setEditable(false);
        price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceActionPerformed(evt);
            }
        });

        jLabel4.setText("Price");

        symbols.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                symbolsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(291, 291, 291)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(63, 63, 63)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(qty)
                                    .addComponent(price)
                                    .addComponent(symbols, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comm)
                                    .addComponent(brokers, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(382, 382, 382)
                        .addComponent(btnAddStock)))
                .addContainerGap(305, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 862, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(224, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(symbols, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(qty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(brokers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(comm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addComponent(btnAddStock)
                .addGap(36, 36, 36))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(30, 30, 30)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(362, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddStockActionPerformed
        // TODO add your handling code here:

        String sym = "", brokername = "";
        int brokerId = 0;
        Double p = 0.0, total = 0.0, balance = 0.0, newbal=0.0;
       
        quantity = Integer.parseInt(qty.getText());
        com = Integer.parseInt(comm.getText());
        String result = null;

        if (qty.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the quantity");
            return;
        }

        if (v.onlyDigits(qty.getText())) {
            System.out.println("correct quantity");
        } else {
            qty.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct quantity");
        }

        
        
        try {
            brokername = brokers.getSelectedItem().toString();
            con = DatabaseConnection.DatabaseCon();

            Statement st0 = con.createStatement();
            String q0 = "Select broker_id from brokers where broker_name='" + brokername + "'";
            ResultSet r0 = st0.executeQuery(q0);
            if (r0.next()) {
                brokerId = r0.getInt("broker_id");
            }
            
            Statement st = con.createStatement();
            String q = "Select totalBalance from account_details where customerId='" + custId + "'";
            ResultSet r = st.executeQuery(q);
            if (r.next()) {
                balance = r.getDouble("totalBalance");
                System.out.println("balance: " + balance);
            }

            p = Double.parseDouble(price.getText());
            quantity = Integer.parseInt(qty.getText());
            total = p * quantity;
            System.out.println("total: " + total);
            
             sym = symbols.getSelectedItem().toString();

            if (total <= balance) {
//                Connectoin con = con.cre
//                Statement statement = con.createStatement();
//                String insertQry = "Insert into stocks (customerId, brokerId, symbol, trade, stock_price, quantity, total_amount)"
//                        + "values(?,?,?,?,?,?,?)");
////                    + custId + "'," + brokerId + "," + sym + ",'" + "BUY" + "','" + p + "', '" + quantity + "', '" + total + "')";
//                insertQry.setInt(1,custId);
//                insertQry.
//                statement.executeUpdate(insertQry);
System.out.println("customer id : " + custId);
DatabaseConnection dc = new DatabaseConnection();
                Connection con = dc.DatabaseCon();
                String query = "insert into stocks (customerId, brokerId, symbol, trade, stock_price, quantity, total_amount)"
                        + "values (?,?,?,?,?,?,?) ";
                PreparedStatement stmt = con.prepareStatement(query);
                stmt.setInt(1, custId);
                stmt.setInt(2, brokerId);
                stmt.setString(3, sym);
                stmt.setString(4, "BUY");
                stmt.setDouble(5, p);
                stmt.setInt(6, quantity);
                stmt.setDouble(7, total);
                stmt.execute();

                
                    newbal = balance-total;
                    
                    
                String query2 = "Update account_details set totalBalance=? where customerId=?";
                PreparedStatement stmt2 = con.prepareStatement(query2);
                stmt.setDouble(1, newbal);
                stmt.setInt(2, custId);
                stmt.execute();
                    JOptionPane.showMessageDialog(null, "Stocks added successfully");
                    populateTable();
                
            } else {
                JOptionPane.showMessageDialog(null, "Balance not sufficient, cannot buy stocks");
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_btnAddStockActionPerformed

    private void brokersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brokersActionPerformed
        // TODO add your handling code here:
        String brokername = brokers.getSelectedItem().toString();
        System.out.println("broker name: " + brokername);
        con = DatabaseConnection.DatabaseCon();
            Statement s;
        try {
            s = con.createStatement();
            String qry = "select commission from brokers where  broker_name='"+brokername+"'";
            ResultSet rs = s.executeQuery(qry);
            if (rs.next()) {
                com = rs.getInt("commission");
                System.out.println("comm: " + com);
            }
            comm.setText(String.valueOf(com));
        } catch (SQLException ex) {
            Logger.getLogger(BuystocksJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    }//GEN-LAST:event_brokersActionPerformed

    private void priceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceActionPerformed

    private void stockTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stockTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) stockTable.getModel();
        // get the selected row index
        int selectedRowIndex = stockTable.getSelectedRow();
    }//GEN-LAST:event_stockTableMouseClicked

    private void symbolsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_symbolsActionPerformed
        // TODO add your handling code here:
        String symbol = symbols.getSelectedItem().toString();
        if (symbol.equals("GOOG")) {
            price.setText("500");
        } else if (symbol.equals("MSFT")) {
            price.setText("700");
        }else if (symbol.equals("NTFX")) {
            price.setText("900");
        }else if (symbol.equals("FB")) {
            price.setText("550");
        }
    }//GEN-LAST:event_symbolsActionPerformed

    private void brokersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_brokersMouseClicked
        // TODO add your handling code here:
        String brokername = brokers.getSelectedItem().toString();
        System.out.println("broker name: " + brokername);
        con = DatabaseConnection.DatabaseCon();
            Statement s;
        try {
            s = con.createStatement();
            String qry = "Select commission from brokers where broker_name='" + brokername + "'";
            ResultSet rs = s.executeQuery(qry);
            if (rs.next()) {
                com = rs.getInt("commission");
                System.out.println("comm: " + com);
            }
            comm.setText(String.valueOf(com));
        } catch (SQLException ex) {
            Logger.getLogger(BuystocksJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_brokersMouseClicked

    public void populateBrokers() {
        try {
            con = DatabaseConnection.DatabaseCon();
            Statement s = con.createStatement();
            String qry = "Select broker_name from brokers";
            ResultSet rs = s.executeQuery(qry);
            while (rs.next()) {
                String nm = rs.getString("broker_name");
                brokers.addItem(nm);
            }
            brokers.setSelectedItem(rs.getString("broker_name"));
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    
    public void populateSymbols() {
        symbols.addItem("GOOG");
        symbols.addItem("MSFT");
        symbols.addItem("NTFX");
        symbols.addItem("FB");
    }


    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) stockTable.getModel();
        model.setRowCount(0);

        try {
            con = DatabaseConnection.DatabaseCon();

            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("Select customerId, brokerId, symbol, trade, stock_price, quantity, total_amount"
                    + " from stocks where customerId = "+custId+"");

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("customerId"),
                    rs.getInt("brokerId"),
                    rs.getString("symbol"),
                    rs.getString("trade"),
                    rs.getDouble("stock_price"),
                    rs.getInt("quantity"),
                    rs.getDouble("total_amount")
                });
//               rs.getString("activeState")
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> brokers;
    private javax.swing.JButton btnAddStock;
    private javax.swing.JTextField comm;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField price;
    private javax.swing.JTextField qty;
    private javax.swing.JTable stockTable;
    private javax.swing.JComboBox<String> symbols;
    // End of variables declaration//GEN-END:variables
}
