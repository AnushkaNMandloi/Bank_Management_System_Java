/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.SystemAdmin;

import Config.DatabaseConnection;
import com.toedter.calendar.JDateChooser;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import utilities.Validations;
import java.util.Date;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author anush
 */
public class ManageEmployeeJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageEmployeeJPanel
     */
    static Connection con;
    Validations v;

    public ManageEmployeeJPanel() {
        initComponents();
        v = new Validations();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        address = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        employeeName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        male = new javax.swing.JRadioButton();
        female = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        age = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        phoneno = new javax.swing.JTextField();
        other = new javax.swing.JRadioButton();
        addEmployee = new javax.swing.JButton();
        updateEmployee = new javax.swing.JButton();
        deleteEmployee = new javax.swing.JButton();
        searchEmployee = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        employeeTable = new javax.swing.JTable();
        searchField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        loginid = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        pwd = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        dobdate = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(165, 183, 195));

        address.setColumns(20);
        address.setRows(5);
        jScrollPane1.setViewportView(address);

        jLabel2.setText("Employee name");

        employeeName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeNameActionPerformed(evt);
            }
        });

        jLabel3.setText("Date of Birth (yyyy-mm-dd)");

        jLabel4.setText("Gender");

        buttonGroup1.add(male);
        male.setText("Male");
        male.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maleActionPerformed(evt);
            }
        });

        buttonGroup1.add(female);
        female.setText("Female");
        female.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                femaleActionPerformed(evt);
            }
        });

        jLabel5.setText("Address");

        jLabel1.setText("Age");

        jLabel6.setText("Phone number");

        buttonGroup1.add(other);
        other.setText("Other");
        other.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                otherActionPerformed(evt);
            }
        });

        addEmployee.setText("ADD");
        addEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmployeeActionPerformed(evt);
            }
        });

        updateEmployee.setText("UPDATE");
        updateEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateEmployeeActionPerformed(evt);
            }
        });

        deleteEmployee.setText("DELETE");
        deleteEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEmployeeActionPerformed(evt);
            }
        });

        searchEmployee.setText("SEARCH");
        searchEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchEmployeeActionPerformed(evt);
            }
        });

        employeeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Employee ID", "Employee Name", "Age", "Gender", "Date of Birth", "Address", "Phone Number", "Active Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        employeeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                employeeTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(employeeTable);

        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        jLabel7.setText("Login ID");

        jLabel8.setText("Password");

        jLabel9.setText("Enter employee id");

        dobdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dobdateActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Manage Employees");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(99, 99, 99)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(searchEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(104, 104, 104)
                                                .addComponent(male)
                                                .addGap(18, 18, 18)
                                                .addComponent(female)
                                                .addGap(18, 18, 18)
                                                .addComponent(other))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addGap(18, 18, 18)
                                                .addComponent(employeeName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(18, 18, 18))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel7)
                                                        .addGap(59, 59, 59)
                                                        .addComponent(loginid, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(87, 87, 87))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addComponent(addEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)))
                                                .addComponent(updateEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel5)
                                                    .addGap(62, 62, 62)
                                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 166, Short.MAX_VALUE)
                                                    .addComponent(jLabel6))))
                                        .addGap(27, 27, 27)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pwd, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(phoneno)
                                        .addComponent(age)
                                        .addComponent(dobdate, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(427, 427, 427)
                        .addComponent(deleteEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(528, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(employeeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(male)
                    .addComponent(female)
                    .addComponent(other)
                    .addComponent(jLabel3)
                    .addComponent(dobdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(phoneno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(loginid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void maleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maleActionPerformed

    private void femaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_femaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_femaleActionPerformed

    private void otherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_otherActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_otherActionPerformed

    private void addEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmployeeActionPerformed
        // TODO add your handling code here:

        loginid.setEnabled(true);
                pwd.setEnabled(true);
        String n, dateofbirth = "", gender, addr, phone, login, password;
        int a = 0;
        System.out.println("entry in manage employee");
        if (employeeName.getText().equals("")
                || age.getText().equals("")
                || dobdate.getText().equals("")
                || address.getText().equals("")
                || phoneno.getText().equals("")
                || loginid.getText().equals("")
                || pwd.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the details");
            return;
        }

        if (v.isValidName(employeeName.getText())) {
            System.out.println("correct name");
        } else {
            employeeName.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct name");
        }

        if (v.onlyDigits(age.getText())) {
            System.out.println("correct age");
        } else {
            age.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct age");
        }

        if (v.isValidString(address.getText())) {
            System.out.println("correct address");
        } else {
            address.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct address");
        }

        if (v.isValidPhoneNumber(phoneno.getText())) {
            System.out.println("correct number");
        } else {
            phoneno.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct phone number");
        }

        if (v.isValidName(employeeName.getText())
                && v.onlyDigits(age.getText())
                && v.isValidString(address.getText())
                && v.isValidPhoneNumber(phoneno.getText())) {
            try {
                male.setActionCommand("Male");
                female.setActionCommand("Female");
                other.setActionCommand("Other");

                n = employeeName.getText();
                a = Integer.parseInt(age.getText());
                gender = buttonGroup1.getSelection().getActionCommand();
                //dateofbirth = dob.getText();
                addr = address.getText();
                phone = phoneno.getText();
                login = loginid.getText();
                password = pwd.getText();
                dateofbirth = dobdate.getText();

                //insert employee to employee table
                con = DatabaseConnection.DatabaseCon();
                Statement stat = con.createStatement();
                String insertQuery = "insert into employee (name,age,gender,dateofbirth,address,phone_number,activeState) "
                        + "values(?,?,?,?,?,?,?)";
                CallableStatement cs = con.prepareCall(insertQuery);
                // cs.setString(1, "001");
                cs.setString(1, n);
                cs.setInt(2, a);
                cs.setString(3, gender);
                cs.setString(4, dateofbirth);
                cs.setString(5, addr);
                cs.setString(6, phone);
                cs.setString(7, "Y");
                cs.execute();

                int empid = 0;

                System.out.println("n: " + n);
                ResultSet rs = stat.executeQuery("select employeeId from employee where name='" + n + "'");
                if (rs.next()) {
                    empid = rs.getInt("employeeId");
                    System.out.println("emp id: " + empid);
                }

                //insert into logincredential 
                String insertQuery2 = "INSERT INTO logincredentials (loginId, userRole, userId, Password) \n"
                        + "values(?,?,?,?)";
                CallableStatement cs1 = con.prepareCall(insertQuery2);
                // cs.setString(1, "001");
                cs1.setString(1, login);
                cs1.setString(2, "EMPLOYEE");
                cs1.setInt(3, empid);
                cs1.setString(4, password);
                cs1.execute();
                JOptionPane.showMessageDialog(null, "Successfully registered. Please check mail for the status");

                employeeName.setText("");
                age.setText("");
                buttonGroup1.clearSelection();
                dobdate.setText("");
                address.setText("");
                phoneno.setText("");
                loginid.setText("");
                pwd.setText("");
                populateTable();
                con.close();
            } catch (Exception e) {
                System.out.println(e);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Enter correct details");
        }


    }//GEN-LAST:event_addEmployeeActionPerformed

    private void updateEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateEmployeeActionPerformed

        String n, dateofbirth = "", gender, addr, phone, login, password;
        int a = 0;
        System.out.println("entry in update employee");
        if (employeeName.getText().equals("")
                || age.getText().equals("")
                || dobdate.getText().equals("")
                || address.getText().equals("")
                || phoneno.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the details");
            return;
        }

        if (v.isValidName(employeeName.getText())) {
            System.out.println("correct name");
        } else {
            employeeName.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct name");
        }

        if (v.onlyDigits(age.getText())) {
            System.out.println("correct age");
        } else {
            age.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct age");
        }

        if (v.isValidString(address.getText())) {
            System.out.println("correct address");
        } else {
            address.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct address");
        }

        if (v.isValidPhoneNumber(phoneno.getText())) {
            System.out.println("correct number");
        } else {
            phoneno.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct phone number");
        }

        if (v.isValidName(employeeName.getText())
                && v.onlyDigits(age.getText())
                && v.isValidString(address.getText())
                && v.isValidPhoneNumber(phoneno.getText())) {
            try {
                male.setActionCommand("Male");
                female.setActionCommand("Female");
                other.setActionCommand("Other");

                n = employeeName.getText();
                a = Integer.parseInt(age.getText());
                gender = buttonGroup1.getSelection().getActionCommand();
                //dateofbirth = dob.getText();
                addr = address.getText();
                phone = phoneno.getText();
                login = loginid.getText();
                password = pwd.getText();
                dateofbirth = dobdate.getText();

                //insert employee to employee table
                con = DatabaseConnection.DatabaseCon();
                Statement stat = con.createStatement();
                String insertQuery = "update employee set name=?,age=?,gender=?,dateofbirth=?,address=?,phone_number=?,activeState=? where employeeId=?";
                CallableStatement cs = con.prepareCall(insertQuery);
                // cs.setString(1, "001");
                cs.setString(1, n);
                cs.setInt(2, a);
                cs.setString(3, gender);
                cs.setString(4, dateofbirth);
                cs.setString(5, addr);
                cs.setString(6, phone);
                cs.setString(7, "Y");
                cs.setInt(8, Integer.parseInt(searchField.getText()));
                cs.execute();
                JOptionPane.showMessageDialog(null, "Employee Successfully updated!.");

                employeeName.setText("");
                age.setText("");
                buttonGroup1.clearSelection();
                dobdate.setText("");
                address.setText("");
                phoneno.setText("");
                loginid.setText("");
                pwd.setText("");
                populateTable();
                con.close();
            } catch (Exception e) {
                System.out.println(e);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Enter correct details");
        }

    }//GEN-LAST:event_updateEmployeeActionPerformed

    private void deleteEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEmployeeActionPerformed
        // TODO add your handling code here:
loginid.setEnabled(true);
                pwd.setEnabled(true);
        int empid;
        try {
            if (searchField.getText() == "") {
                JOptionPane.showMessageDialog(null, "Empty field employee id");
                return;
            } else {
                //if(custid is a number){

                //}
                empid = Integer.parseInt(searchField.getText());

            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Employee ID not valid!");
            return;
        }
        
        int i = 0;
        String status = "";
        try {
            status = "N";
            i = Integer.parseInt(searchField.getText());
            DatabaseConnection dc = new DatabaseConnection();
            Connection con = dc.DatabaseCon();
//            Statement s=con.createStatement();
//            s.executeUpdate("update customer set activeState='"+status+" where customeId="+i+" ");
            String query = "Update employee set activeState=? where employeeId=?";
            PreparedStatement stmt = con.prepareStatement(query);
            stmt.setString(1, status);
            stmt.setInt(2, i);
            stmt.execute();
            JOptionPane.showMessageDialog(null, "Record deleted successfully");
        } catch (Exception e) {
            System.out.println(e);
        }

    }//GEN-LAST:event_deleteEmployeeActionPerformed

    private void searchEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchEmployeeActionPerformed
        // TODO add your handling code here:
loginid.setEnabled(true);
                pwd.setEnabled(true);
        int empid;
        try {
            if (searchField.getText() == "") {
                JOptionPane.showMessageDialog(null, "Empty field employee id");
                return;
            } else {
                //if(custid is a number){

                //}
                empid = Integer.parseInt(searchField.getText());

            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Employee ID not valid!");
            return;
        }

        try {
            DatabaseConnection dc = new DatabaseConnection();
            Connection con = dc.DatabaseCon();
            Statement s = con.createStatement();
            ResultSet rs = s.executeQuery("select * from employee where employeeId=" + empid + "");
            while (rs.next()) {
                employeeName.setText(rs.getString("name"));
                age.setText(rs.getString("age"));
                if (rs.getString("gender") == "male") {
                    male.setEnabled(true);
                } else if (rs.getString("gender") == "female") {
                    female.setEnabled(true);
                } else if (rs.getString("gender") == "trans") {
                    other.setEnabled(true);
                }
                dobdate.setText("" + rs.getString("dateofbirth"));
                address.setText(rs.getString("address"));
                phoneno.setText("" + rs.getString("phone_number"));
                loginid.setEnabled(false);
                pwd.setEnabled(false);
                JOptionPane.showMessageDialog(null, "Record searched!");
            }

        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_searchEmployeeActionPerformed

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFieldActionPerformed

    private void dobdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dobdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dobdateActionPerformed

    private void employeeNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employeeNameActionPerformed

    private void employeeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_employeeTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) employeeTable.getModel();
        // get the selected row index
        int selectedRowIndex = employeeTable.getSelectedRow();
        // set the selected row data into jtextfields
        searchField.setText(model.getValueAt(selectedRowIndex, 0).toString());
    }//GEN-LAST:event_employeeTableMouseClicked

    private String convertDateToString(Date inputDate) {
        String parseDt = null;
        try {
            Date dt = inputDate;
            SimpleDateFormat pattern = new SimpleDateFormat("MM/dd/yyyy");
            parseDt = pattern.format(dt);

        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
        return parseDt;
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) employeeTable.getModel();
        model.setRowCount(0);

        try {
            con = DatabaseConnection.DatabaseCon();

            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("Select * from employee");

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("employeeId"),
                    rs.getString("name"),
                    rs.getInt("age"),
                    rs.getString("gender"),
                    rs.getString("dateofbirth"),
                    rs.getString("address"),
                    rs.getString("phone_number"),
                    rs.getString("activeState")
                });
//               rs.getString("activeState")
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEmployee;
    private javax.swing.JTextArea address;
    private javax.swing.JTextField age;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton deleteEmployee;
    private javax.swing.JTextField dobdate;
    private javax.swing.JTextField employeeName;
    private javax.swing.JTable employeeTable;
    private javax.swing.JRadioButton female;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField loginid;
    private javax.swing.JRadioButton male;
    private javax.swing.JRadioButton other;
    private javax.swing.JTextField phoneno;
    private javax.swing.JTextField pwd;
    private javax.swing.JButton searchEmployee;
    private javax.swing.JTextField searchField;
    private javax.swing.JButton updateEmployee;
    // End of variables declaration//GEN-END:variables
}
