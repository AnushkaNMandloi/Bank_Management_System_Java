/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.SystemAdmin;

import Config.DatabaseConnection;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.ParseException;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.util.Locale;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import utilities.Validations;

/**
 *
 * @author anush
 */
public class ManageCustomerJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageCustomerJPanel
     */
    Validations v;
    static Connection con;

    public ManageCustomerJPanel() {
        initComponents();
        v = new Validations();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel10 = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        savingsAccount = new javax.swing.JRadioButton();
        checkingAccount = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        genMale = new javax.swing.JRadioButton();
        genFemale = new javax.swing.JRadioButton();
        genOther = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        txtPin = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtContact = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtMotherName = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        cityComboBox = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        addCustomer = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtNationality = new javax.swing.JTextField();
        stateComboBox = new javax.swing.JComboBox<>();
        dobDateChooser = new com.toedter.calendar.JDateChooser();
        txtFatherName = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        updateCustomer = new javax.swing.JButton();
        searchCustomer = new javax.swing.JButton();
        deleteCustomer = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        customerTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(165, 183, 195));

        jLabel10.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Date of Birth");

        txtAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAgeActionPerformed(evt);
            }
        });

        buttonGroup2.add(savingsAccount);
        savingsAccount.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        savingsAccount.setForeground(new java.awt.Color(102, 102, 102));
        savingsAccount.setText("Savings");
        savingsAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savingsAccountActionPerformed(evt);
            }
        });

        buttonGroup2.add(checkingAccount);
        checkingAccount.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        checkingAccount.setForeground(new java.awt.Color(102, 102, 102));
        checkingAccount.setText("Checking");
        checkingAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkingAccountActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Account Holder's Name");

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Gender");

        buttonGroup1.add(genMale);
        genMale.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        genMale.setForeground(new java.awt.Color(102, 102, 102));
        genMale.setText("Male");
        genMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genMaleActionPerformed(evt);
            }
        });

        buttonGroup1.add(genFemale);
        genFemale.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        genFemale.setForeground(new java.awt.Color(102, 102, 102));
        genFemale.setText("Female");
        genFemale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genFemaleActionPerformed(evt);
            }
        });

        buttonGroup1.add(genOther);
        genOther.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        genOther.setForeground(new java.awt.Color(102, 102, 102));
        genOther.setText("Other");

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Pin");

        txtPin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPinActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("City");

        jLabel9.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Mother's name");

        jLabel20.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("State");

        jLabel12.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Email");

        cityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        cityComboBox.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                cityComboBoxComponentAdded(evt);
            }
        });
        cityComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityComboBoxActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Age");

        addCustomer.setText("Add Customer");
        addCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomerActionPerformed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Nationality");

        jLabel11.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Phone number");

        txtNationality.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNationalityActionPerformed(evt);
            }
        });

        stateComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Madhya Pradesh", "Uttar Pradesh", "Karnataka", "Gujarat", "Rajasthan", "Maharashtra", "Tamil Nadu", "Bihar", "Jharkhand", "Punjab", "Andhra Pradesh", "Arunachal Pradesh", "Kerala", "Chattisgarh", "West Bengal", "Orissa", "Assam", "Manipur", "Nagaland", "Haryana", "Uttarakhand", "Himachal Pradesh", "Sikkim", "Meghalaya", "Tripura", "Mizoram", "Arunachal Pradesh", "Telangana", "Himachal Pradesh", "Jammu and kashmir", " ", " " }));
        stateComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stateComboBoxActionPerformed(evt);
            }
        });

        txtFatherName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFatherNameActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Account type");

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Address");

        txtAddress.setColumns(20);
        txtAddress.setRows(5);
        jScrollPane1.setViewportView(txtAddress);

        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Father's name");

        updateCustomer.setText("Update Customer");
        updateCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCustomerActionPerformed(evt);
            }
        });

        searchCustomer.setText("Search Customer");
        searchCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCustomerActionPerformed(evt);
            }
        });

        deleteCustomer.setText("Delete Customer");
        deleteCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCustomerActionPerformed(evt);
            }
        });

        jLabel2.setText("Enter customer ID");

        customerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "CustomerId", "Name", "Age", "Gender", "Date of Birth", "Father's Name", "Mother's Name", "Phone number", "Email", "Active state"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        customerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customerTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(customerTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(92, 92, 92))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(searchCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(updateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(308, 308, 308)
                                .addComponent(deleteCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(464, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPin, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtMotherName, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cityComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel11)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel20)
                                                    .addComponent(jLabel8)
                                                    .addComponent(jLabel21))
                                                .addGap(26, 26, 26)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(stateComboBox, 0, 232, Short.MAX_VALUE)
                                                    .addComponent(txtFatherName, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                                                    .addComponent(txtContact, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                                                    .addComponent(txtNationality))))
                                        .addGap(50, 50, 50))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel6)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel3)
                                                .addComponent(jLabel13))
                                            .addGap(26, 26, 26)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                                                .addComponent(txtAge, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                                                .addComponent(txtName)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel10)
                                        .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(savingsAccount)
                                        .addGap(34, 34, 34)
                                        .addComponent(checkingAccount))
                                    .addComponent(dobDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(genMale)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(genFemale)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(genOther)))))
                        .addGap(227, 227, 227))))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1374, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(271, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(dobDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(savingsAccount)
                            .addComponent(checkingAccount))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(genMale)
                            .addComponent(genFemale)
                            .addComponent(genOther)
                            .addComponent(jLabel5)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(136, 136, 136)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFatherName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNationality, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtMotherName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(cityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deleteCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                    .addComponent(addCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updateCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAgeActionPerformed

    private void savingsAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savingsAccountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_savingsAccountActionPerformed

    private void checkingAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkingAccountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkingAccountActionPerformed

    private void genMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genMaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_genMaleActionPerformed

    private void genFemaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genFemaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_genFemaleActionPerformed

    private void txtPinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPinActionPerformed

    private void cityComboBoxComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_cityComboBoxComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_cityComboBoxComponentAdded

    private void cityComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityComboBoxActionPerformed
        // TODO add your handling code here:
        Object item1 = cityComboBox.getSelectedItem();

    }//GEN-LAST:event_cityComboBoxActionPerformed

    private void addCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustomerActionPerformed
        // TODO add your handling code here:       
        int age = 0;
        double accountno;
        String name, dob, gender, address, state, city, nationality, fathersname, mothersname, email, accType, pin, phoneno;

        genMale.setActionCommand("Male");
        genFemale.setActionCommand("Female");
        genOther.setActionCommand("Other");
        savingsAccount.setActionCommand("SAVINGS");
        checkingAccount.setActionCommand("CHECKING");
        
        name = txtName.getText();
        age = Integer.parseInt(txtAge.getText());
        gender = buttonGroup1.getSelection().getActionCommand();
        address = txtAddress.getText();
        state = stateComboBox.getSelectedItem().toString();
        city = cityComboBox.getSelectedItem().toString();
        pin = txtPin.getText();
        nationality = txtNationality.getText();
        fathersname = txtFatherName.getText();
        mothersname = txtMotherName.getText();
        phoneno = txtContact.getText();
        email = txtEmail.getText();
        accType = buttonGroup2.getSelection().getActionCommand();
        String date = convertDateToString(dobDateChooser.getDate());
        System.out.println("Formatted Date: " + date);

        ///////////////////////////////////////////////
        if (txtName.getText().equals("")
                || txtAge.getText().equals("")
                || accType.equals("")
                || gender.equals("")
                || txtAddress.getText().equals("")
                || txtPin.getText().equals("")
                || city.equals("")
                || state.equals("")
                || txtNationality.getText().equals("")
                || txtFatherName.getText().equals("")
                || txtMotherName.getText().equals("")
                || txtContact.getText().equals("")
                || txtEmail.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the details");
            return;
        }

        if (v.isValidName(txtName.getText())) {
            System.out.println("correct name");
        } else {
            txtName.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct name");
        }
        if (v.onlyDigits(txtAge.getText())) {
            System.out.println("correct age");
        } else {
            txtAge.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct age");
        }

        if (v.isValidString(txtAddress.getText())) {
            System.out.println("correct address");
        } else {
            txtAddress.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct address");
        }
        if (v.isValidPin(txtPin.getText())) {
            System.out.println("correct pin");
        } else {
            txtPin.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct pin");
        }
        if (v.isValidString(txtNationality.getText())) {
            System.out.println("correct nationality");
        } else {
            txtNationality.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct nationality");
        }
        if (v.isValidString(txtFatherName.getText())) {
            System.out.println("correct fathers name");
        } else {
            txtFatherName.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct fathers name");
        }
        if (v.isValidString(txtMotherName.getText())) {
            System.out.println("correct mothers name");
        } else {
            txtMotherName.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct mothers name");
        }
        if (v.isValidPhoneNumber(txtContact.getText())) {
            System.out.println("correct contact");
        } else {
            txtContact.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct contact");
        }
        if (v.isValidEmail(txtEmail.getText())) {
            System.out.println("correct email");
        } else {
            txtEmail.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct email");
        }

        if (v.isValidName(txtName.getText())
                && v.onlyDigits(txtAge.getText())
                && v.isValidString(txtAddress.getText())
                && v.isValidPin(txtPin.getText())
                && v.isValidString(txtNationality.getText())
                && v.isValidString(txtFatherName.getText())
                && v.isValidString(txtMotherName.getText())
                && v.isValidPhoneNumber(txtContact.getText())
                && v.isValidEmail(txtEmail.getText())) {

            int balance = 0;

            try {

                con = DatabaseConnection.DatabaseCon();
                Statement stat = con.createStatement();
                String insertQuery = "insert into customer ( customerName, age, gender, date_of_birth, address, city, state, pin, nationality, fathers_name, mothers_name, phone_number, email, activeState,account_type) "
                        + "values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                CallableStatement cs = con.prepareCall(insertQuery);
                // cs.setString(1, "001");
                cs.setString(1, name);
                cs.setInt(2, age);
                cs.setString(3, gender);
                cs.setString(4, date);
                cs.setString(5, address);
                cs.setString(6, "Boston");
                cs.setString(7, "MA");
                // cs.setString(8, "United States");
                cs.setString(8, pin);
                cs.setString(9, nationality);
                cs.setString(10, fathersname);
                cs.setString(11, mothersname);
                cs.setString(12, phoneno);
                cs.setString(13, email);
                cs.setString(14, "N");
                cs.setString(15, accType);

                //cs.setString(16,"PENDING");
                cs.execute();
                String slectQry = "SELECT LAST_INSERT_ID()";
                int id = 0;
                ResultSet rs = stat.executeQuery(slectQry);
                while (rs.next()) {
                    id = rs.getInt(1);
                }
                String insertQuery2 = "INSERT INTO accountapplication (custId,processStatus,applicationStatus,applicationType) \n"
                        + "values(?,?,?,?)";
                CallableStatement cs1 = con.prepareCall(insertQuery2);
                // cs.setString(1, "001");
                cs1.setInt(1, id);
                cs1.setString(2, "PENDING");
                cs1.setString(3, "PENDING");
                cs1.setString(4, "REGISTER");
                cs1.execute();
                JOptionPane.showMessageDialog(null, "Successfully registered. Please check mail for the status");

                txtName.setText("");
                txtAddress.setText("");
                txtAge.setText("");
                txtPin.setText("");
                txtContact.setText("");
                txtNationality.setText("");
                buttonGroup2.clearSelection();
                buttonGroup1.clearSelection();
                txtFatherName.setText("");
                txtMotherName.setText("");
                txtEmail.setText("");
                con.close();
            } catch (Exception e) {
                System.out.println(e);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Enter correct details");
        }
        //////////////////////////////////////////////
    }//GEN-LAST:event_addCustomerActionPerformed

    private void txtNationalityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNationalityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNationalityActionPerformed

    private void stateComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stateComboBoxActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_stateComboBoxActionPerformed

    private void txtFatherNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFatherNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFatherNameActionPerformed

    private void updateCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCustomerActionPerformed
        // TODO add your handling code here:
        int i = 0, a = 0, ag = 0;
        double accountno;
        String name, dob, gender, address, state, city, nationality, fathersname, mothersname, email, accType, pin, phoneno;

        try {
            if (searchField.getText() == "") {
                JOptionPane.showMessageDialog(null, "Empty field customer id");
                return;
            } else {
                //if(custid is a number){

                //}
                i = Integer.parseInt(searchField.getText());

            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Customer ID not valid!");
            return;
        }

        genMale.setActionCommand("Male");
        genFemale.setActionCommand("Female");
        genOther.setActionCommand("Other");
        savingsAccount.setActionCommand("SAVINGS");
        checkingAccount.setActionCommand("CHECKING");
        int age = Integer.parseInt(txtAge.getText());
        //int id;
        //id=Integer.parseInt(tf1.getText());
        name = txtName.getText();

//        dob=txtAge.getText();
        gender = buttonGroup1.getSelection().getActionCommand();
        address = txtAddress.getText();
        state = stateComboBox.getSelectedItem().toString();
        city = cityComboBox.getSelectedItem().toString();
        pin = txtPin.getText();
        nationality = txtNationality.getText();
        fathersname = txtFatherName.getText();
        mothersname = txtMotherName.getText();
        phoneno = txtContact.getText();
        email = txtEmail.getText();
        accType = buttonGroup2.getSelection().getActionCommand();
        String date = convertDateToString(dobDateChooser.getDate());
        System.out.println("Formatted Date: " + date);

        ///////////////////////////////////////////////
        if (txtName.getText().equals("")
                || txtAge.getText().equals("")
                || accType.equals("")
                || gender.equals("")
                || txtAddress.getText().equals("")
                || txtPin.getText().equals("")
                || city.equals("")
                || state.equals("")
                || txtNationality.getText().equals("")
                || txtFatherName.getText().equals("")
                || txtMotherName.getText().equals("")
                || txtContact.getText().equals("")
                || txtEmail.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the details");
            return;
        }

        if (v.isValidName(txtName.getText())) {
            System.out.println("correct name");
        } else {
            txtName.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct name");
        }
        if (v.onlyDigits(txtAge.getText())) {
            System.out.println("correct age");
        } else {
            txtAge.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct age");
        }

        if (v.isValidString(txtAddress.getText())) {
            System.out.println("correct address");
        } else {
            txtAddress.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct address");
        }
        if (v.isValidPin(txtPin.getText())) {
            System.out.println("correct pin");
        } else {
            txtPin.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct pin");
        }
        if (v.isValidString(txtNationality.getText())) {
            System.out.println("correct nationality");
        } else {
            txtNationality.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct nationality");
        }
        if (v.isValidString(txtFatherName.getText())) {
            System.out.println("correct fathers name");
        } else {
            txtFatherName.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct fathers name");
        }
        if (v.isValidString(txtMotherName.getText())) {
            System.out.println("correct mothers name");
        } else {
            txtMotherName.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct mothers name");
        }
        if (v.isValidPhoneNumber(txtContact.getText())) {
            System.out.println("correct contact");
        } else {
            txtContact.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct contact");
        }
        if (v.isValidEmail(txtEmail.getText())) {
            System.out.println("correct email");
        } else {
            txtEmail.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct email");
        }

        if (v.isValidName(txtName.getText())
                && v.onlyDigits(txtAge.getText())
                && v.isValidString(txtAddress.getText())
                && v.isValidPin(txtPin.getText())
                && v.isValidString(txtNationality.getText())
                && v.isValidString(txtFatherName.getText())
                && v.isValidString(txtMotherName.getText())
                && v.isValidPhoneNumber(txtContact.getText())
                && v.isValidEmail(txtEmail.getText())) {

            int balance = 0;

            try {

                gender = buttonGroup1.getSelection().getActionCommand();
                System.out.println(gender);
                ag = Integer.parseInt(txtAge.getText());

                if (v.isValidName(txtName.getText())
                        && v.onlyDigits(txtAge.getText())
                        && v.isValidString(txtAddress.getText())
                        && v.isValidPin(txtPin.getText())
                        && v.isValidString(txtNationality.getText())
                        && v.isValidString(txtFatherName.getText())
                        && v.isValidString(txtMotherName.getText())
                        && v.isValidPhoneNumber(txtContact.getText())
                        && v.isValidEmail(txtEmail.getText())) {
                    DatabaseConnection dc = new DatabaseConnection();
                    Connection con = dc.DatabaseCon();
                    String query = "Update customer set customerName=?,age=?,gender=?,date_of_birth=?,address=?,city=?,state=?,pin=?,"
                            + "nationality=?,fathers_name=?,mothers_name=?,phone_number=?,email=? where customerId=?";
                    PreparedStatement stmt = con.prepareStatement(query);
                    stmt.setString(1, name);
                    stmt.setInt(2, ag);
                    stmt.setString(3, gender);
                    stmt.setString(4, date);
                    stmt.setString(5, address);
                    stmt.setString(6, "Boston");
                    stmt.setString(7, "MA");
                    // cs.setString(8, "United States");
                    stmt.setString(8, pin);
                    stmt.setString(9, nationality);
                    stmt.setString(10, fathersname);
                    stmt.setString(11, mothersname);
                    stmt.setString(12, phoneno);
                    stmt.setString(13, email);
                    stmt.setInt(14, i);
                    stmt.execute();
                    txtName.setText("");
                    txtAddress.setText("");
                    txtAge.setText("");
                    txtPin.setText("");
                    txtContact.setText("");
                    txtNationality.setText("");
                    buttonGroup2.clearSelection();
                    buttonGroup1.clearSelection();
                    txtFatherName.setText("");
                    txtMotherName.setText("");
                    txtEmail.setText("");
                    dobDateChooser.setDate(null);
                    JOptionPane.showMessageDialog(null, "Record updated successfully");

                } else {
                    JOptionPane.showMessageDialog(this, "Enter correct details");
                }
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_updateCustomerActionPerformed

    private void searchCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCustomerActionPerformed
        // TODO add your handling code here:
        int custid;
        String g = "", type = "";

        try {
            if (searchField.getText() == "") {
                JOptionPane.showMessageDialog(null, "Empty field customer id");
                return;
            } else {
                //if(custid is a number){

                //}
                custid = Integer.parseInt(searchField.getText());

            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Customer ID not valid!");
            return;
        }

        try {
            DatabaseConnection dc = new DatabaseConnection();
            Connection con = dc.DatabaseCon();
            Statement s = con.createStatement();
            ResultSet rs = s.executeQuery("select * from customer where customerId=" + custid + "");
            while (rs.next()) {
                txtName.setText(rs.getString("customerName"));
                //txtAge.setText(rs.getString("age"));
                g = rs.getString("gender");
                type = rs.getString("account_type");
                if (g.equalsIgnoreCase("Male")) {
                    genMale.setSelected(true);
                } else if (g.equalsIgnoreCase("Female")) {
                    genFemale.setSelected(true);
                } else if (g.equalsIgnoreCase("Other")) {
                    genOther.setSelected(true);
                }
                if (type.equalsIgnoreCase("Savings")) {
                    savingsAccount.setSelected(true);
                } else if (type.equalsIgnoreCase("Checking")) {
                    checkingAccount.setSelected(true);
                }

//                SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH);
//
//                String dateInString = rs.getString("date_of_birth");
//                Date date = formatter.parse(dateInString);

                txtName.setText(rs.getString("customerName"));
                txtAge.setText(String.valueOf(rs.getInt("age")));
                txtAddress.setText(rs.getString("address"));
                txtPin.setText(rs.getString("pin"));
                txtNationality.setText(rs.getString("nationality"));
                txtContact.setText(rs.getString("phone_number"));
                txtFatherName.setText(rs.getString("fathers_name"));
                txtMotherName.setText(rs.getString("mothers_name"));
                txtEmail.setText(rs.getString("email"));
                JOptionPane.showMessageDialog(null, "Record searched!");
            }

        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_searchCustomerActionPerformed

    private void deleteCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCustomerActionPerformed
        // TODO add your handling code here:
        int custid;
        try {
            if (searchField.getText() == "") {
                JOptionPane.showMessageDialog(null, "Empty field customer id");
                return;
            } else {
                //if(custid is a number){

                //}
                custid = Integer.parseInt(searchField.getText());

            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Customer ID not valid!");
            return;
        }

        int i = 0;
        String status = "";
        try {
            status = "N";
            i = Integer.parseInt(searchField.getText());
            DatabaseConnection dc = new DatabaseConnection();
            Connection con = dc.DatabaseCon();
//            Statement s=con.createStatement();
//            s.executeUpdate("update customer set activeState='"+status+" where customeId="+i+" ");
            String query = "Update customer set activeState=? where customerId=?";
            PreparedStatement stmt = con.prepareStatement(query);
            stmt.setString(1, status);
            stmt.setInt(2, i);
            stmt.execute();
            JOptionPane.showMessageDialog(null, "Record deleted successfully");
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_deleteCustomerActionPerformed

    private void customerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) customerTable.getModel();
        // get the selected row index
        int selectedRowIndex = customerTable.getSelectedRow();
        // set the selected row data into jtextfields
        searchField.setText(model.getValueAt(selectedRowIndex, 0).toString());
    }//GEN-LAST:event_customerTableMouseClicked

    private String convertDateToString(Date inputDate) {
        String parseDt = null;
        try {
            Date dt = inputDate;
            SimpleDateFormat pattern = new SimpleDateFormat("MM/dd/yyyy");
            parseDt = pattern.format(dt);

        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
        return parseDt;
    }

    public void Search(String str) {
        DefaultTableModel model = (DefaultTableModel) customerTable.getModel();
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(model);
        customerTable.setRowSorter(trs);
        trs.setRowFilter(RowFilter.regexFilter(str));
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) customerTable.getModel();
        model.setRowCount(0);

        try {
            con = DatabaseConnection.DatabaseCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("Select customerId,customerName,age,"
                    + "gender,date_of_birth,fathers_name,mothers_name,phone_number,email, activeState from customer");
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("customerId"),
                    rs.getString("customerName"),
                    rs.getInt("age"),
                    rs.getString("gender"),
                    rs.getString("date_of_birth"),
                    rs.getString("fathers_name"),
                    rs.getString("mothers_name"),
                    rs.getString("phone_number"),
                    rs.getString("email"),
                    rs.getString("activeState")});
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCustomer;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButton checkingAccount;
    private javax.swing.JComboBox<String> cityComboBox;
    private javax.swing.JTable customerTable;
    private javax.swing.JButton deleteCustomer;
    private com.toedter.calendar.JDateChooser dobDateChooser;
    private javax.swing.JRadioButton genFemale;
    private javax.swing.JRadioButton genMale;
    private javax.swing.JRadioButton genOther;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JRadioButton savingsAccount;
    private javax.swing.JButton searchCustomer;
    private javax.swing.JTextField searchField;
    private javax.swing.JComboBox<String> stateComboBox;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtContact;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFatherName;
    private javax.swing.JTextField txtMotherName;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtNationality;
    private javax.swing.JTextField txtPin;
    private javax.swing.JButton updateCustomer;
    // End of variables declaration//GEN-END:variables
}
