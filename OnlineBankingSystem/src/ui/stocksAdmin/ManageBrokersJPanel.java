/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.stocksAdmin;

import Config.DatabaseConnection;
import javax.swing.JOptionPane;
import utilities.Validations;
import java.sql.Statement;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author gorubhambhani
 */
public class ManageBrokersJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageBrokersJPanel
     */
    Validations v;
    static Connection con;
    public ManageBrokersJPanel() {
        initComponents();
        v=new Validations();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        add = new javax.swing.JButton();
        search = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        brokersTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        commission = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(165, 183, 195));

        add.setText("Add Broker");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        search.setText("Search Broker");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        update.setText("Update Broker");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        delete.setText("Delete Broker");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        brokersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Broker Id", "Broker Name", "Commission", "Earnings"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        brokersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                brokersTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(brokersTable);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Broker Name");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Commission");

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Manage Brokers");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(298, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(696, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(commission, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(140, 140, 140))))
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(485, 485, 485))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel3)
                .addGap(106, 106, 106)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(commission, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(259, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:

        String n = "";
        int com = 0;

        if (name.getText().equals("")
            || commission.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the details");
            return;
        }

        //broker_name = name.getText();
        //com = Integer.parseInt(commission.getText());
        if (v.isValidName(name.getText())) {
            System.out.println("correct name");
            n = name.getText();
        } else {
            name.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct name");
        }
        if (v.onlyDigits(commission.getText())) {
            System.out.println("correct commission");
            com = Integer.parseInt(commission.getText());
        } else {
            commission.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct commission");
        }

        if (v.isValidName(name.getText())
            && v.onlyDigits(commission.getText())) {
            try {

                con = DatabaseConnection.DatabaseCon();
                Statement stat = con.createStatement();
                String insertQuery = "insert into brokers (broker_name, commission) "
                + "values(?,?)";

                CallableStatement cs = con.prepareCall(insertQuery);
                cs.setString(1, n);
                cs.setInt(2, com);
                cs.execute();
                JOptionPane.showMessageDialog(null, "Successfully registered");
                name.setText("");
                commission.setText("");
                populateTable();
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_addActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:

        int broid = 0;
        try {
            if (searchField.getText() == "") {
                JOptionPane.showMessageDialog(null, "Empty field broker id");
                return;
            } else {
                //if(custid is a number){

                    //}
                broid = Integer.parseInt(searchField.getText());

            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Broker ID not valid!");
            return;
        }

        try {
            DatabaseConnection dc = new DatabaseConnection();
            Connection con = dc.DatabaseCon();
            Statement s = con.createStatement();
            ResultSet rs = s.executeQuery("select broker_name, commission from brokers where broker_id= '" + broid + "'");
            while (rs.next()) {
                name.setText(rs.getString("broker_name"));
                commission.setText(String.valueOf(rs.getInt("commission")));
                JOptionPane.showMessageDialog(null, "Record searched!");
            }

        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_searchActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        String broker_name = "";
        int com = 0, i = 0;

        try {
            if (searchField.getText() == "") {
                JOptionPane.showMessageDialog(null, "Empty field broker id");
                return;
            } else {
                //if(custid is a number){

                    //}
                i = Integer.parseInt(searchField.getText());

            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Broker ID not valid!");
            return;
        }

        if (name.getText().equals("")
            || commission.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Enter the details");
            return;
        }

        if (v.isValidName(name.getText())) {
            System.out.println("correct name");
        } else {
            name.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct name");
        }
        if (v.onlyDigits(commission.getText())) {
            System.out.println("correct commission");
        } else {
            commission.setText("");
            JOptionPane.showMessageDialog(this, "Enter correct commission");
        }

        if (v.isValidName(name.getText())
            && v.onlyDigits(commission.getText())) {
            try {
                i = Integer.parseInt(searchField.getText());
                broker_name = name.getText();
                com = Integer.parseInt(commission.getText());
                con = DatabaseConnection.DatabaseCon();
                Statement stat = con.createStatement();
                String insertQuery = "Update brokers set broker_name=?, commission=? where broker_id=?";

                CallableStatement cs = con.prepareCall(insertQuery);
                cs.setString(1, broker_name);
                cs.setInt(2, com);
                cs.setInt(3, i);
                cs.execute();
                JOptionPane.showMessageDialog(null, "Successfully updated broker");
                name.setText("");
                commission.setText("");
                populateTable();
            } catch (Exception e) {
                System.out.println(e);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Enter correct details");
        }
    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        int broid, com = 0;
        String broname = "";
        try {
            if (searchField.getText() == "") {
                JOptionPane.showMessageDialog(null, "Empty field Broker id");
                return;
            } else {
                //if(custid is a number){

                    //}
                broid = Integer.parseInt(searchField.getText());

            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Broker ID not valid!");
            return;
        }

        try {
            DatabaseConnection dc = new DatabaseConnection();
            Connection con = dc.DatabaseCon();
            String query = "DELETE FROM brokers WHERE broker_id = ?";
            PreparedStatement stmt = con.prepareStatement(query);
            stmt.setInt(1, broid);
            stmt.execute();
            JOptionPane.showMessageDialog(null, "Record deleted successfully");
            name.setText("");
            commission.setText("");
            populateTable();
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void brokersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_brokersTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) brokersTable.getModel();
        // get the selected row index
        int selectedRowIndex = brokersTable.getSelectedRow();
        // set the selected row data into jtextfields
        searchField.setText(model.getValueAt(selectedRowIndex, 0).toString());
    }//GEN-LAST:event_brokersTableMouseClicked

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFieldActionPerformed

    public void Search(String str) {
        DefaultTableModel model = (DefaultTableModel) brokersTable.getModel();
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(model);
        brokersTable.setRowSorter(trs);
        trs.setRowFilter(RowFilter.regexFilter(str));
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) brokersTable.getModel();
        model.setRowCount(0);

        try {
            con = DatabaseConnection.DatabaseCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("Select * from brokers");
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("broker_id"),
                    rs.getString("broker_name"),
                    rs.getInt("commission"),
                    rs.getDouble("earnings")});
//               rs.getString("activeState")
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JTable brokersTable;
    private javax.swing.JTextField commission;
    private javax.swing.JButton delete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField name;
    private javax.swing.JButton search;
    private javax.swing.JTextField searchField;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
