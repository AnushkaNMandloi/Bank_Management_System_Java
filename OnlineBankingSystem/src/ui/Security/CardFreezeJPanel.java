/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Security;

import Config.DatabaseConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author anush
 */
public class CardFreezeJPanel extends javax.swing.JPanel {

    int custid=0;
    static Connection con;
    /**
     * Creates new form CardFreezeJPanel
     */
    public CardFreezeJPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        freezeCards = new javax.swing.JButton();
        unnfreezeCards = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        accountDetailApplications = new javax.swing.JTable();
        freezeDebitCard = new javax.swing.JButton();
        unfreezeDebitCard = new javax.swing.JButton();
        freezeCreditCard = new javax.swing.JButton();
        unfreezeCreditCard = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(165, 183, 195));

        freezeCards.setText("VIEW ALL FREEZE REQUESTS");
        freezeCards.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freezeCardsActionPerformed(evt);
            }
        });

        unnfreezeCards.setText("VIEW ALL UNFREEZE REQUESTS");
        unnfreezeCards.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unnfreezeCardsActionPerformed(evt);
            }
        });

        accountDetailApplications.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Customer Id", "Account Number", "Account Type", "Credit Card Active", "Debit Card Active"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        accountDetailApplications.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                accountDetailApplicationsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(accountDetailApplications);

        freezeDebitCard.setText("Freeze Debit Card");
        freezeDebitCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freezeDebitCardActionPerformed(evt);
            }
        });

        unfreezeDebitCard.setText("Unfreeze Debit Card");
        unfreezeDebitCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unfreezeDebitCardActionPerformed(evt);
            }
        });

        freezeCreditCard.setText("Freeze Credit Card");
        freezeCreditCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freezeCreditCardActionPerformed(evt);
            }
        });

        unfreezeCreditCard.setText("Unfreeze Credit Card");
        unfreezeCreditCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unfreezeCreditCardActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CARD ACTIONS");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(freezeCards, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(unnfreezeCards, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(281, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(freezeCreditCard, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(freezeDebitCard, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(unfreezeDebitCard, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(unfreezeCreditCard, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(427, 427, 427))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel1)
                .addGap(114, 114, 114)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(freezeCards, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unnfreezeCards, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(freezeDebitCard, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unfreezeDebitCard, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(freezeCreditCard, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unfreezeCreditCard, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(337, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void freezeCardsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freezeCardsActionPerformed
        // TODO add your handling code here:
        unfreezeDebitCard.setEnabled(false);
        unfreezeCreditCard.setEnabled(false);
        freezeDebitCard.setEnabled(true);
        freezeCreditCard.setEnabled(true);
        
        DefaultTableModel model = (DefaultTableModel) accountDetailApplications.getModel();
        model.setRowCount(0);

        try {
             con = DatabaseConnection.DatabaseCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("Select a.customerId, a.account_number,a.type, a.creditCardActive, a.debitCardActive from "
                    + "account_details a where (a.creditCardActive='Y' OR a.debitCardActive='Y')");
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("customerId"),
                    rs.getString("account_number"),
                    rs.getString("type"),
                    rs.getString("creditCardActive"),
                    rs.getString("debitCardActive")
                });
//               rs.getString("activeState")
            }
        }
        catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_freezeCardsActionPerformed

    private void unfreezeCreditCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unfreezeCreditCardActionPerformed
        // TODO add your handling code here:
        if ((accountDetailApplications.getSelectionModel().isSelectionEmpty())) {
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        } else {
            try {
                 con = DatabaseConnection.DatabaseCon();

                String query1 = "update account_details set creditCardActive=? where customerId=?";
                PreparedStatement stmt1 = con.prepareStatement(query1);
                stmt1.setString(1, "Y");
                stmt1.setInt(2, custid);
                System.out.println(stmt1.execute());
                stmt1.execute();
                JOptionPane.showMessageDialog(null, "Credit card activated!");
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_unfreezeCreditCardActionPerformed

    private void unnfreezeCardsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unnfreezeCardsActionPerformed
        // TODO add your handling code here:
        freezeDebitCard.setEnabled(false);
        freezeCreditCard.setEnabled(false);
        unfreezeDebitCard.setEnabled(true);
        unfreezeCreditCard.setEnabled(true);
        
        DefaultTableModel model = (DefaultTableModel) accountDetailApplications.getModel();
        model.setRowCount(0);

        try {
             con = DatabaseConnection.DatabaseCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("Select a.customerId, a.account_number,a.type, a.creditCardActive, a.debitCardActive from "
                    + "account_details a where (a.creditCardActive='N' OR a.debitCardActive='N')");
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("customerId"),
                    rs.getString("account_number"),
                    rs.getString("type"),
                    rs.getString("creditCardActive"),
                    rs.getString("debitCardActive")
                });
//               rs.getString("activeState")
            }
        }
        catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_unnfreezeCardsActionPerformed

    private void unfreezeDebitCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unfreezeDebitCardActionPerformed
        // TODO add your handling code here:
        if ((accountDetailApplications.getSelectionModel().isSelectionEmpty())) {
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        } else {
            try {
                 con = DatabaseConnection.DatabaseCon();
                String query1 = "update account_details set debitCardActive=? where customerId=?";
                PreparedStatement stmt1 = con.prepareStatement(query1);
                stmt1.setString(1, "Y");
                stmt1.setInt(2, custid);
                System.out.println(stmt1.execute());
                stmt1.execute();
                JOptionPane.showMessageDialog(null, "Debit card activated!");
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_unfreezeDebitCardActionPerformed

    private void accountDetailApplicationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_accountDetailApplicationsMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) accountDetailApplications.getModel();
        // get the selected row index
        int selectedRowIndex = accountDetailApplications.getSelectedRow();
        // set the selected row data into jtextfields
        custid = Integer.parseInt(model.getValueAt(selectedRowIndex, 0).toString());
        System.out.println( "custid: " +custid);
    }//GEN-LAST:event_accountDetailApplicationsMouseClicked

    private void freezeDebitCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freezeDebitCardActionPerformed
        // TODO add your handling code here:
        if ((accountDetailApplications.getSelectionModel().isSelectionEmpty())) {
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        } else {
            try {
                 con = DatabaseConnection.DatabaseCon();

                String query1 = "update account_details set debitCardActive=? where customerId=?";
                PreparedStatement stmt1 = con.prepareStatement(query1);
                stmt1.setString(1, "N");
                stmt1.setInt(2, custid);
                System.out.println(stmt1.execute());
                stmt1.execute();
                JOptionPane.showMessageDialog(null, "Debit card inactive");
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_freezeDebitCardActionPerformed

    private void freezeCreditCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freezeCreditCardActionPerformed
        // TODO add your handling code here:
        if ((accountDetailApplications.getSelectionModel().isSelectionEmpty())) {
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        } else {
            try {
                 con = DatabaseConnection.DatabaseCon();

                String query1 = "update account_details set creditCardActive=? where customerId=?";
                PreparedStatement stmt1 = con.prepareStatement(query1);
                stmt1.setString(1, "N");
                stmt1.setInt(2, custid);
                System.out.println(stmt1.execute());
                stmt1.execute();
                JOptionPane.showMessageDialog(null, "Credit card inactive");
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_freezeCreditCardActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable accountDetailApplications;
    private javax.swing.JButton freezeCards;
    private javax.swing.JButton freezeCreditCard;
    private javax.swing.JButton freezeDebitCard;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton unfreezeCreditCard;
    private javax.swing.JButton unfreezeDebitCard;
    private javax.swing.JButton unnfreezeCards;
    // End of variables declaration//GEN-END:variables
}
