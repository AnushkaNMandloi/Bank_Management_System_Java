/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Security;

import Config.DatabaseConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Customer.CustomerForm;
import utilities.JavaMailUtil;

/**
 *
 * @author anush
 */
public class ViewCustomerApplicationsPanel extends javax.swing.JPanel {
    
    /**
     * Creates new form ViewCustomerApplicationsPanel
     */
    static Connection con;
    public ViewCustomerApplicationsPanel() {
        initComponents();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        customerApplications = new javax.swing.JTable();
        rejectApplication = new javax.swing.JButton();
        approveApplication = new javax.swing.JToggleButton();
        customerId = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(165, 183, 195));

        customerApplications.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Customer Id", "Name", "Age", "Gender", "Date of Birth", "Address", "City", "State", "Pin", "Nationality", "Fathers Name", "Mothers Name", "Phone number", "Email", "Active state"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        customerApplications.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customerApplicationsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(customerApplications);

        rejectApplication.setText("Reject Application");
        rejectApplication.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectApplicationActionPerformed(evt);
            }
        });

        approveApplication.setText("Approve Application");
        approveApplication.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveApplicationActionPerformed(evt);
            }
        });

        customerId.setEditable(false);
        customerId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerIdActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Customer Applications");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(303, 303, 303)
                .addComponent(customerId, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(77, 77, 77)
                .addComponent(approveApplication, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61)
                .addComponent(rejectApplication, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(377, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel1)
                .addGap(61, 61, 61)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerId, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(approveApplication, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rejectApplication, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(431, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void customerApplicationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerApplicationsMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) customerApplications.getModel();
        // get the selected row index
        int selectedRowIndex = customerApplications.getSelectedRow();
        // set the selected row data into jtextfields
        customerId.setText(model.getValueAt(selectedRowIndex, 0).toString());
    }//GEN-LAST:event_customerApplicationsMouseClicked

    private void rejectApplicationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectApplicationActionPerformed
        // TODO add your handling code here:
        if (customerId.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Empty textbox, first select a row!");
            return;
        }
        int i = Integer.parseInt(customerId.getText());
        try {
                
                DatabaseConnection dc = new DatabaseConnection();
                Connection con = dc.DatabaseCon();

                String query1 = "update customer set activeState=? where customerId=?";
                PreparedStatement stmt1 = con.prepareStatement(query1);
                stmt1.setString(1, "N");
                stmt1.setInt(2, i);
                stmt1.execute();
                
                String query2 = "update accountApplication set processStatus=?, applicationStatus=? WHERE custId=?";
                PreparedStatement stmt2 = con.prepareStatement(query2);
                stmt2.setString(1, "Complete");
                stmt2.setString(2, "Rejected");
                stmt2.setInt(3, i);
                stmt2.execute();
                
                
            } catch (Exception e) {
                System.out.println(e);
            }
    }//GEN-LAST:event_rejectApplicationActionPerformed
    
    public CustomerForm getCustomerDetails(int custId){
        CustomerForm form = new CustomerForm();
        try {
            
            
            con = DatabaseConnection.DatabaseCon();
            
            String query = "select * from customer where customerId="+custId;
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);
            if (rs.next()){
                form.setName(rs.getString("customerName"));
                form.setEmailId(rs.getString("email"));
                form.setAccType(rs.getString("account_type"));
                form.setContactNo(rs.getLong("phone_number"));
                form.setAddress(rs.getString("address")+","+rs.getString("city")+","+rs.getString("state"));
                
                
            }
            
            
        } catch (SQLException ex) {
            Logger.getLogger(ViewCustomerApplicationsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        return form;
    }
    private void approveApplicationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveApplicationActionPerformed
         try {
             con = DatabaseConnection.DatabaseCon();
                if (customerId.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Empty textbox, first select a row!");
                    return;
                }
                int i = Integer.parseInt(customerId.getText());
                
                CustomerForm form = getCustomerDetails(i);
                form.setId(i);
        
        
//        CreateCustomerCredentialsJPanel ccp = new CreateCustomerCredentialsJPanel(i);
//
//        int result = JOptionPane.showConfirmDialog(null, ccp,
//                "Please Enter login id and password Values", JOptionPane.OK_CANCEL_OPTION);
//        if (result == JOptionPane.OK_OPTION) {
           
            boolean mailSuccess = JavaMailUtil.sendMail(form,"REGISTER");
           
                
              
            if(mailSuccess){   
                String q = "insert into logincredentials values(?,?,?,?)";
                PreparedStatement ps = con.prepareStatement(q);
                ps.setString(1,  "CUSTOMER");
                ps.setInt(2, form.getId());
                ps.setString(3, "CT"+form.getId());
                ps.setString(4, "password");
                ps.execute();

                String query1 = "update customer set activeState=? where customerId=?";
                PreparedStatement stmt1 = con.prepareStatement(query1);
                stmt1.setString(1, "Y");
                stmt1.setInt(2, i);
                stmt1.execute();
                
                String query2 = "update accountApplication set processStatus=?, applicationStatus=? WHERE custId=?";
                PreparedStatement stmt2 = con.prepareStatement(query2);
                stmt2.setString(1, "COMPLETED");
                stmt2.setString(2, "APPROVED");
                stmt2.setInt(3, i);
                stmt2.execute();
                
                                    
                String accno="BANK01CT"+i;
                System.out.println("account number: " + accno);
                
                String query3 = "INSERT INTO account_details(account_number, type, customerId, creditCardActive, debitCardActive,totalBalance) "
                        + "values(?,?,?,?,?,?)";
                PreparedStatement stmt3 = con.prepareStatement(query3);
                stmt3.setString(1, accno);
                stmt3.setString(2, form.getAccType());
                stmt3.setInt(3, i);
                stmt3.setString(4, "N");
                stmt3.setString(5, "N");
                stmt3.setDouble(6, 0.00);
                stmt3.execute();
                
                JOptionPane.showMessageDialog(null, "Account successfully created!");
             }else{
                 JOptionPane.showMessageDialog(null, "Failed to send mail. Please try again");
             }
                
            } catch (Exception e) {
                System.out.println(e);
            }
        
    }//GEN-LAST:event_approveApplicationActionPerformed

    private void customerIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerIdActionPerformed

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) customerApplications.getModel();
        model.setRowCount(0);

        try {
            con = DatabaseConnection.DatabaseCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("Select customer.* from customer , accountApplication a where"
                    + "(customer.activeState='N' AND (a.processStatus='WIP' AND a.applicationStatus='PENDING') AND "
                    + "customer.customerId=a.custId )");
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("customerId"),
                    rs.getString("customerName"),
                    rs.getInt("age"),
                    rs.getString("gender"),
                    rs.getString("date_of_birth"),
                    rs.getString("address"),
                    rs.getString("city"),
                    rs.getString("state"),
                    rs.getString("pin"),
                    rs.getString("nationality"),
                    rs.getString("fathers_name"),
                    rs.getString("mothers_name"),
                    rs.getString("phone_number"),
                    rs.getString("email"),
                    rs.getString("activeState")
                });
//               rs.getString("activeState")
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton approveApplication;
    private javax.swing.JTable customerApplications;
    private javax.swing.JTextField customerId;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton rejectApplication;
    // End of variables declaration//GEN-END:variables
}
